from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes
from telegram.ext import AIORateLimiter, Application
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import filters
from aiohttp import web
import os
import logging

TOKEN =("7860332054:AAHhewKAqfQRML4eMoypQyOC62Kduz9BwiA")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # —ç—Ç–æ —Ç–≤–æ–π Render URL, —Ç–∏–ø–∞ https://yourbot.onrender.com

logging.basicConfig(level=logging.INFO)

# Handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üìö –ü–æ–º–æ—â—å –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º", "üßæ –®–ø–∞—Ä–≥–∞–ª–∫–∞"], ["üìù –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –≤ —É—á—ë–±–µ.", reply_markup=markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.lower()
    if user_text == "üìö –ø–æ–º–æ—â—å –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç.")
    elif user_text == "üßæ —à–ø–∞—Ä–≥–∞–ª–∫–∞":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–µ–º—É —à–ø–∞—Ä–≥–∞–ª–∫–∏.")
    elif user_text == "üìù –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        await update.message.reply_text("–°–ø—Ä–æ—Å–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å.")
    elif user_text == "üìÖ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.")
    else:
        await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω—è–ª. –í—ã–±–µ—Ä–∏ –∏–∑ –º–µ–Ω—é.")

# Webhook setup
async def webhook(request):
    data = await request.json()
    await application.update_queue.put(Update.de_json(data, application.bot))
    return web.Response()

async def on_startup(app):
    await application.bot.set_webhook(f"{WEBHOOK_URL}/webhook")

application = Application.builder().token(TOKEN).rate_limiter(AIORateLimiter()).build()
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# Aiohttp app
web_app = web.Application()
web_app.add_routes([web.post('/webhook', webhook)])
web_app.on_startup.append(on_startup)

if __name__ == "__main__":
    web.run_app(web_app, port=int(os.environ.get("PORT", 10000)))
